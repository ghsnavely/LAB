---
# This playbook is an example for ACI build automation using for a tenant created by Garrett Snavely
# This playbook does a Snapshot of the fabric then deploys configuration then runs visual validation
# This playbook expects the following file setup (replace ansible_dir with where ever you put it)
# ~/ansible_dir/ansible.cfg
# ~/ansible_dir/inventory
# ~/ansible_dir/aci_build.yml
# ~/ansible_dir/build_vars/tenant_file.yml
#            

- name: BUILD out of new tenant base infrastructure
# hosts matches up to group in the inventory file
  hosts: apic_group
  connection: local
  gather_facts: no

# prompting for username password for this Play
  vars_prompt:
    - name: "aci_user_id"
      prompt: "UserID"
      private: no
    - name: "aci_user_pass"
      prompt: "Password"
      private: yes

#Expecting just the name of the var file with the extention (.yml in this case)
    - name: "var_file_var"
      prompt: "What is the name of your Variable File?"
      private: no

# PULLING IN VARIABLES FOR CONFIGURATION
# Can change the directory as needed 
  tasks:
    - name: OBTAIN CONFIG VARIABLES
      include_vars: 
        file: ./build_vars/{{ var_file_var }}
        
# Make Snapshot for current configuration - List Current Snapshots in {{backup_name_var}}

    - name: PRE-BUILD TASK 1 - Creating a new SNAPSHOT in "{{ backup_name_var }}"
      aci_config_snapshot:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present
        validate_certs: no
        use_ssl: yes
        export_policy: "{{ backup_name_var }}"
        max_count: 10
        description: Backups taken before new configs are applied.

    - name: PRE-BUILD TASK 2 - VALIDATE SNAPSHOT in "{{ backup_name_var }}"
      aci_config_snapshot:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: query
        validate_certs: no
        use_ssl: yes        
        export_policy: "{{ backup_name_var }}"
      register: fabric_snapshot

    - name: PRE-BUILD TASK 2b - CREATE Filterd Json list for SNAPSHOTS in "{{ backup_name_var }}"
      set_fact:
        snapshot_list: "{{ fabric_snapshot| json_query('current[].configSnapshotCont. {Name: attributes.name, Backup_Name: children[].configSnapshot.attributes.name ,Backup_File: children[].configSnapshot.attributes.fileName}') }}"
    - name: PRE-BUILD TASK 2c - PRINT SNAPSHOT LIST to screen
      debug: var=snapshot_list

# Build Job uses variables from the var_file listed above

# Deploys to ACI fabric

    - name: TASK 1 - BUILD {{ tenant_var }} on {{ inventory_hostname }}
      aci_tenant:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        description: "{{ tenant_description }}"

    # This is setup to not use policy enforcement in fabric
    # if you want to use contracts change policy_control_preference to enforced
    - name: TASK 2 - BUILD Routing {{ vrf_var }} for {{ tenant_var }} on {{ inventory_hostname }}
      aci_vrf:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        vrf: "{{ vrf_var }}"
        policy_control_preference: unenforced
        description: "{{ vrf_description }}"
    
    # Building an L3 out for this tenant - using aci-rest module with pushing configuration as a json file format
    # this is using a sub-interface on a port, the L3 domain and vlan pool must be preconfigured
    # This L3out is using a name of L3out_{{ tenant_var }}
    - name: TASK 2b - BUILD Routing L3out  on {{ inventory_hostname }}
      aci_rest:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        method: post
        validate_certs: no
        use_ssl: yes        
        path: '/api/node/mo/uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}.json'
        content:        {
"l3extOut": {
    "attributes": {
        "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}",
        "name": "L3out_{{ tenant_var }}",
        "rn": "out-L3out_{{ tenant_var }}", 
    },
    "children": [
        {
            "bgpExtP": {
                "attributes": {
                    "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/bgpExtP",
                    "rn": "bgpExtP",
                },
                "children": []
            }
        },
        {
            "l3extInstP": {
                "attributes": {
                    "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/instP-default",
                    "name": "default",
                    "rn": "instP-default",
                },
                "children": [
                    {
                        "l3extSubnet": {
                            "attributes": {
                                "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/instP-default/extsubnet-[0.0.0.0/0]",
                                "ip": "0.0.0.0/0",
                                "aggregate": "",
                                "rn": "extsubnet-[0.0.0.0/0]",
                            },
                            "children": []
                        }
                    }
                ]
            }
        },
        {
            "l3extLNodeP": {
                "attributes": {
                    "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes",
                    "name": "L3Out_{{ tenant_var }}_Nodes",
                    "rn": "lnodep-L3Out_{{ tenant_var }}_Nodes",
                },
                "children": [
                    {
                        "l3extLIfP": {
                            "attributes": {
                                "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf",
                                "name": "L3out_{{ tenant_var }}_Intf",
                                "descr": "L3out for switch1",
                                "rn": "lifp-L3out_{{ tenant_var }}_Intf", 
                            },
                            "children": [
                                {
                                    "l3extRsPathL3OutAtt": {
                                        "attributes": {
                                            "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf1 }}/pathep-[eth1/{{ l3out_leaf1_int }}]]",
                                            "ifInstT": "sub-interface",
                                            "encap": "vlan-{{ l3out_leaf1_vlan }}",
                                            "addr": "{{ l3out_leaf1_ip_addr }}",
                                            "tDn": "topology/pod-1/paths-{{ l3out_leaf1 }}/pathep-[eth1/{{ l3out_leaf1_int }}]",
                                            "rn": "rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf1 }}/pathep-[eth1/{{ l3out_leaf1_int }}]]",
                                        },
                                        "children": [
                                            {
                                                "bgpPeerP": {
                                                    "attributes": {
                                                        "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf1 }}/pathep-[eth1/{{ l3out_leaf1_int }}]]/peerP-[{{ l3out_leaf1_bgp_peer_ip }}]",
                                                        "addr": "{{ l3out_leaf1_bgp_peer_ip }}",
                                                        "rn": "peerP-[{{ l3out_leaf1_bgp_peer_ip }}]",
                                                    },
                                                    "children": [
                                                        {
                                                            "bgpAsP": {
                                                                "attributes": {
                                                                    "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf1 }}/pathep-[eth1/{{ l3out_leaf1_int }}]]/peerP-[{{ l3out_leaf1_bgp_peer_ip }}]/as",
                                                                    "asn": "{{ bgp_neighbor_asn }}", 
                                                                },
                                                                "children": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "l3extRsPathL3OutAtt": {
                                        "attributes": {
                                            "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf2 }}/pathep-[eth1/{{ l3out_leaf2_int }}]]",
                                            "ifInstT": "sub-interface",
                                            "encap": "vlan-{{ l3out_leaf2_vlan }}",
                                            "addr": "{{ l3out_leaf2_ip_addr }}",
                                            "tDn": "topology/pod-1/paths-{{ l3out_leaf2 }}/pathep-[eth1/{{ l3out_leaf2_int }}]",
                                            "rn": "rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf2 }}/pathep-[eth1/{{ l3out_leaf2_int }}]]",
                                        },
                                        "children": [
                                            {
                                                "bgpPeerP": {
                                                    "attributes": {
                                                        "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf2 }}/pathep-[eth1/{{ l3out_leaf2_int }}]]/peerP-[{{ l3out_leaf2_bgp_peer_ip }}]",
                                                        "addr": "{{ l3out_leaf2_bgp_peer_ip }}",
                                                        "rn": "peerP-[{{ l3out_leaf2_bgp_peer_ip }}]", 
                                                    },
                                                    "children": [
                                                        {
                                                            "bgpAsP": {
                                                                "attributes": {
                                                                    "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/lifp-L3out_{{ tenant_var }}_Intf/rspathL3OutAtt-[topology/pod-1/paths-{{ l3out_leaf2 }}/pathep-[eth1/{{ l3out_leaf2_int }}]]/peerP-[{{ l3out_leaf2_bgp_peer_ip }}]/as",
                                                                    "asn": "{{ bgp_neighbor_asn }}",
                                                                },
                                                                "children": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "bgpProtP": {
                            "attributes": {
                                "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/protp",
                                "rn": "protp",  
                            },
                            "children": [
                                {
                                    "bgpRsBgpNodeCtxPol": {
                                        "attributes": {
                                            "tnBgpCtxPolName": "default",
                                            "status": "created,modified"
                                        },
                                        "children": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "l3extRsNodeL3OutAtt": {
                            "attributes": {
                                "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/rsnodeL3OutAtt-[topology/pod-1/node-{{ l3out_leaf1 }}]",
                                "tDn": "topology/pod-1/node-{{ l3out_leaf1 }}",
                                "rtrId": "{{ l3out_leaf1_loopback }}",
                                "rn": "rsnodeL3OutAtt-[topology/pod-1/node-{{ l3out_leaf1 }}]",
                            },
                            "children": [
                                {
                                    "l3extInfraNodeP": {
                                        "attributes": {
                                            "fabricExtCtrlPeering": "false", 
                                        },
                                        "children": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "l3extRsNodeL3OutAtt": {
                            "attributes": {
                                "dn": "uni/tn-{{ tenant_var }}/out-L3out_{{ tenant_var }}/lnodep-L3Out_{{ tenant_var }}_Nodes/rsnodeL3OutAtt-[topology/pod-1/node-{{ l3out_leaf2 }}]",
                                "tDn": "topology/pod-1/node-{{ l3out_leaf2 }}",
                                "rtrId": "{{ l3out_leaf2_loopback }}",
                                "rn": "rsnodeL3OutAtt-[topology/pod-1/node-{{ l3out_leaf2 }}]",
                            },
                            "children": [
                                {
                                    "l3extInfraNodeP": {
                                        "attributes": {
                                            "fabricExtCtrlPeering": "false",
                                        },
                                        "children": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "l3extRsEctx": {
                "attributes": {
                    "tnFvCtxName": "{{ tenant_var }}",
                    "status": "created,modified"
                },
                "children": []
            }
        },
        {
            "l3extRsL3DomAtt": {
                "attributes": {
                    "tDn": "uni/l3dom-{{ l3out_domain }}",
                    
                },
                "children": []
            }
        }
    ]
}
}

   # Tasks in Group 3 Build Bridge Domain, add default gateway add then add Task 2 created L3out
   # These are using a Loop ( with_items ) to create more than one bridge domain
   # The same name is used for the BD and EPG

    - name: TASK 3a - BUILD L2/L3 Bridge Domain on {{ inventory_hostname }}
      aci_bd:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present
        validate_certs: no
        use_ssl: yes        
        tenant: "{{ tenant_var }}"
        bd: "{{ item.bd_epg_var }}"
        description: "{{ item.bd_description }}"
        vrf: "{{ vrf_var }}"          
      with_items: "{{ bd }}"  

    - name: TASK 3b - BUILD ADD IP Gateway to L2/L3 Bridge Domain on {{ inventory_hostname }}
      aci_bd_subnet:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present        
        validate_certs: no
        use_ssl: yes 
        tenant: "{{ tenant_var }}"
        bd: "{{ item.bd_epg_var }}"
        gateway: "{{ item.gateway_ip_var }}"
        mask: "{{ item.subnet_mask_var }}"
        scope: "{{ item.net_scope_var }}"       
      with_items: "{{ bd }}"
    
    - name: TASK 3c - BUILD ADD L3Out to L2/L3 Bridge Domain        
      aci_bd_to_l3out:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        bd: "{{ item.bd_epg_var }}"
        l3out: "L3out_{{ tenant_var}}"
      with_items: "{{ bd }}"
      
#BUILD Application Profile
# These are using a Loop ( with_items ) to create more than one application profile
    - name: TASK 4 - BUILD New Application Profile on {{ inventory_hostname }}
      aci_ap:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present        
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        ap: "{{ item.app_profile_var }}"
        description: "{{ item.app_profile_description }}"
      with_items: "{{ apps }}"

#Task 5s BUILD End Point Groups, then add physical domain and then add EPG setup to the AAEP vs static bindings
# These are using a Loop ( with_items ) to create more than end point group
    - name: TASK 5a - BUILD New EPG on {{ inventory_hostname }}
      aci_epg:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present        
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        ap: "{{ item.bd_app_profile_var }}"
        bd: "{{ item.bd_epg_var }}"
        epg: "{{ item.bd_epg_var}}"
      with_items: "{{ bd }}"
    - name: TASK 5b - ADD Physical Domain to NEW EPGs on {{ inventory_hostname }}    
      aci_epg_to_domain:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        state: present        
        validate_certs: no
        use_ssl: yes
        tenant: "{{ tenant_var }}"
        ap: "{{ item.bd_app_profile_var }}"        
        epg: "{{ item.bd_epg_var }}"
        domain: "{{ item.domain_var }}"
        domain_type: phys
      with_items: "{{ bd }}"

    # ADD ENDPOINT GROUPS TO CORRECT AAEP
    - name: TASK 5c - ADDing EPG vlan tags AAEPs on  {{ inventory_hostname }}
      aci_rest:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        method: post
        validate_certs: no
        use_ssl: yes        
        path: '/api/node/mo/uni/infra/attentp-{{ item.AAEP_var }}/gen-default.json'
        content:
          {
    "infraGeneric": {
        "attributes": {
            "dn": "uni/infra/attentp-{{ item.AAEP_var }}/gen-default",
            "name": "default",
            "status": "created,modified"
        },
        "children": [
            {
                "infraRsFuncToEpg": {
                    "attributes": {
                        "tDn": "uni/tn-{{ tenant_var }}/ap-{{ item.bd_app_profile_var }}/epg-{{ item.bd_epg_var }}",
                        "status": "created,modified",
                        "encap": "vlan-{{ item.vlan_var }}"
                    }
                }
            }
        ]
    }
}
      with_items: "{{ bd }}"

#Validation Steps

# Pulls the json for Tenant that was just built
    - name: POST TASK 1a - GET ACI Application Profiles for {{ tenant_var }} from {{ inventory_hostname }}
      aci_ap:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        tenant: "{{ tenant_var }}"
        validate_certs: no
        use_ssl: yes
        state: query
      register: tenant_aps

# Creates a Filtered list from json output
    - name: POST TASK 1b - Build Application Profile List
      set_fact:
        ap_list: "{{ tenant_aps | json_query('current[].fvTenant. {Tenant: attributes.name Application_Profile: children[].fvAp.attributes.name EPG: children[].fvAp.children[].fvAEPg.attributes.name VMM: children[].fvAp.children[].fvAEPg.children[].fvRsDomAtt.attributes.tDn }
') }}"

# Print to Screen Filtered list
    - name: POST TASK 2c - PRINT Application Profile List
      debug: var=ap_list

# Pulls configuration of the configured encapsulation of the AAEP in json format
    - name: VALIDATE TASK 2a - Validate EPG to Attachable Access Entity Profile (AAEP) mappings on {{ inventory_hostname }}
      aci_rest:
        hostname: "{{ inventory_hostname }}"
        username: "{{ aci_user_id }}"
        password: "{{ aci_user_pass }}"
        method: get
        path: '/api/node/mo/uni/infra/attentp-{{ AAEP_var }}/gen-default.json?query-target=children&target-subtree-class=infraRsFuncToEpg'
        validate_certs: no
        use_ssl: yes  
      register: fabric_aaep

# Filters output of previous task and Prints to screen
    - name: VALIDATE TASK 2b - Build mapping list
      set_fact:
        aaep_list: "{{ fabric_aaep | json_query('imdata[*].infraRsFuncToEpg.attributes.{name: tDn, vlan: encap}') }}"
    - name: VALIDATE TASK 2c - PRINT to Screen AAEP LIST
      debug: var=aaep_list
